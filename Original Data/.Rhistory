shiny::runApp('D:/docs/Spring 2017/499R/Chen-Zheng-Calculator')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
shiny::runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
source("https://bioconductor.org/biocLite.R")
biocLite("inSilicoMerging")
install.packages('DWD')
biocLite('DWD')
dat <- data.frame(id=c(1,1,3),id2=c(1,1,4),somevalue=c("x","y","z"))
dat
unique(dat)
dat[,1][which(dat[,1] == 1)]
install.packages('shiny')
shiny::runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
install.packages('shinyjs')
install.packages("shinyjs")
library(shinyjs)
shiny::runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
install.packages('yaml')
library(DT)
library(shiny)
library(ggplot2)
library(shinyjs)
library(dplyr)
library(digest)
install.packages('DT')
install.packages("DT")
install.packages
install.packages('DT')
install.packages('shiny')
install.packages('shinyjs')
install.packages('ggplot2')
install.packages('dplyr')
install.packages('digest')
library(DT)
library(shiny)
library(ggplot2)
library(shinyjs)
library(dplyr)
library(digest)
source("https://bioconductor.org/biocLite.R")
biocLite('DT')
.libPaths()
source("https://bioconductor.org/biocLite.R")
biocLite(DT)
source("https://bioconductor.org/biocLite.R")
biocLite(DT)
biocLite('DT')
.libPaths()
shiny::runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
shiny::runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
library(shinyjs)
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
shiny::runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
runApp('D:/docs/Fall 2017/Honors/EWOC-NETS')
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk")
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk")
list.files()
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
list.files()
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t')
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE)
View(datamutation)
head(table(datamutation$V42))
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE,col.names = TRUE)
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE)
colnames(datamutation)
ncol(datamutation)
colnames(datamutation) <- datamutation[,1]
length(datamutation[,1])
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
datamutation <- data.table::(read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE))
colnames(datamutation) <- datamutation[,1]
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
datamutation <- data.table(read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE))
colnames(datamutation) <- datamutation[,1]
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE)
datamutation <- data.table(datamutation)
library(data.table)
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE)
datamutation <- data.table(datamutation)
head(datamutation)
View(head(datamutation))
colnames(datamutation) <- datamutation[,1]
colnames(datamutation) <- datamutation[1,]
datamutation[1,]
colnames(datamutation) <- datamutation[1,]
colnames(datamutation) <- unlist(datamutation[1,])
unlist(datamutation[1,])
colnames(datamutation) <- as.character(unlist(datamutation[1,]))
View(head(datamutation))
datamutation <- datamutation[-1,]
View(head(datamutation))
# Delete certain useless columns with no content
datamutation <-
View(head(datamutation))
table(datamutation)
table(datamutation[,'Entrz_Gene_Id'])
datamutation[,'Entrz_Gene_Id']
datamutation[,.Entrz_Gene_Id]
datamutation[,.(Entrz_Gene_Id)]
datamutation[, .(Entrz_Gene_Id)]
datamutation[, list(Entrz_Gene_Id)]
datamutation[, list(Entrez_Gene_Id)]
colnames(datamutation)
# Delete certain useless columns with no content
datamutation <-
View(head(datamutation))
#library for sql based data table
library(data.table)
# Setting working directory
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
# Reading raw mutation data file
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE)
# Converting raw data into data.table type
datamutation <- data.table(datamutation)
# Change column names
colnames(datamutation) <- as.character(unlist(datamutation[1,]))
# Delete first row
datamutation <- datamutation[-1,]
datamutation[, list(Entrez_Gene_Id)]
class(datamutation[, list(Entrez_Gene_Id)])
datamutation[,1]
datamutation[,5]
datamutation[,3]
datamutation[,3][1] == ''
# Delete certain useless columns with no content
deletecol <- []
# Delete certain useless columns with no content
deletecol <- c()
# Delete certain useless columns with no content
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[colnamemut[i] == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,i)
}
}
deletecol
# Delete certain useless columns with no content
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[colnamemut[i] == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,i)
print(i)
}
}
colnamemut <- colnames(datamutation)
colnamemut
datamutation[colnamemut[1] == ""]
datamutation[colnamemut[3] == ""]
datamutation[colnamemut[3] == '']
colnamemut[3]
datamutation[center == '']
datamutation[Center == '']
datamutation[as.character(colnamemut[3]) == '']
datamutation[get(colnamemut[3]) == '']
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[get(colnamemut[i]) == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,i)
print(i)
}
}
table(datamutation[,15])
table(datamutation[,16])
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[get(colnamemut[i]) == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,i)
print(table(datamutation[,i]))
}
}
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[get(colnamemut[i]) == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,i)
print(table(datamutation[,get(colnamemut[i])]))
}
}
ncol(datamutation[,-deletecol])
ncol(datamutation[,deletecol := NULL])
# Delete certain useless columns with no content
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[get(colnamemut[i]) == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,colnamemut[i])
print(table(datamutation[,get(colnamemut[i])]))
}
}
ncol(datamutation[,deletecol := NULL])
get(colnamemut[i])
get(colnamemut[1])
ncol(datamutation[,get(deletecol) := NULL])
ncol(datamutation)
datamutation[,get(deletecol) := NULL]
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[get(colnamemut[i]) == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,i)
print(table(datamutation[,get(colnamemut[i])]))
}
}
ncol(datamutation[,get(deletecol) := NULL])
ncol(datamutation[,deletecol := NULL])
ncol(datamutation[,deletecol])
ncol(datamutation[,..deletecol])
ncol(datamutation[,..deletecol := NULL])
View(head(datamutation))
ncol(datamutation[,(deletecol) := NULL])
# Delete certain useless columns with no content
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[get(colnamemut[i]) == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,colnamemut[i])
print(table(datamutation[,get(colnamemut[i])]))
}
}
ncol(datamutation[,(deletecol) := NULL])
View(head(datamutation))
#library for sql based data table
library(data.table)
# Setting working directory
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
# Reading raw mutation data file
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE)
# Converting raw data into data.table type
datamutation <- data.table(datamutation)
# Change column names
colnames(datamutation) <- as.character(unlist(datamutation[1,]))
# Delete first row
datamutation <- datamutation[-1,]
#library for sql based data table
library(data.table)
# Setting working directory
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
# Reading raw mutation data file
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE)
# Converting raw data into data.table type
datamutation <- data.table(datamutation)
# Change column names
colnames(datamutation) <- as.character(unlist(datamutation[1,]))
# Delete first row
datamutation <- datamutation[-1,]
# Delete certain useless columns with no content
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[get(colnamemut[i]) == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,colnamemut[i])
print(table(datamutation[,get(colnamemut[i])]))
}
}
ncol(datamutation[,-(deletecol) ])
ncol(datamutation[,-deletecol ])
ncol(datamutation[,(deletecol) := NULL])
datamutation[,(deletecol) := NULL]
datamutation <- datamutation[,(deletecol) := NULL]
View(head(datamutation))
#library for sql based data table
library(data.table)
# Setting working directory
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
# Reading raw mutation data file
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE)
# Converting raw data into data.table type
datamutation <- data.table(datamutation)
# Change column names
colnames(datamutation) <- as.character(unlist(datamutation[1,]))
# Delete first row
datamutation <- datamutation[-1,]
View(head(datamutation))
table(datamutation[,list(Codons)])
length(table(datamutation[,list(Codons)]))
nrow(datamutation)
list.files()
# Append sample information
# Read Sample Information
datasampleinfo <- read.table('data_clinical_sample.txt',sep = '\t',fill = TRUE)
datasampleinfo <- data.table(datasampleinfo)
# Change column names
colnames(datasampleinfo) <- as.character(unlist(datasampleinfo[1,]))
# Delete first row
datasampleinfo <- datasampleinfo[-1,]
View(head(datasampleinfo))
datamutation <- data.frame(datamutation)
datasampleinfo <- data.frame(datasampleinfo)
View(head(datamutation))
merge(datamutation,datasampleinfo,by.x = datamutation$Tumor_Sample_Barcode,by.y = datasampleinfo$SAMPLE_ID)
merge(datamutation,datasampleinfo,by.x = 'Tumor_Sample_Barcode',by.y = 'SAMPLE_ID')
mergeddata <- merge(datamutation,datasampleinfo,by.x = 'Tumor_Sample_Barcode',by.y = 'SAMPLE_ID')
View(head(mergeddata))
nrow(mergeddata)
nrow(datamutation)
#library for sql based data table
library(data.table)
# Setting working directory
setwd("D:/docs/Spring 2018/CS378/Git378/cs378-msk/Original Data")
# Reading raw mutation data file
datamutation <- read.table('data_mutations_uniprot.txt',sep = '\t',fill = TRUE)
# Converting raw data into data.table type
datamutation <- data.table(datamutation)
# Change column names
colnames(datamutation) <- as.character(unlist(datamutation[1,]))
# Delete first row
datamutation <- datamutation[-1,]
# Delete certain useless columns with no content
deletecol <- c()
colnamemut <- colnames(datamutation)
for(i in ncol(datamutation):1){
if(nrow(datamutation[get(colnamemut[i]) == ""]) == nrow(datamutation)){
deletecol <- c(deletecol,colnamemut[i])
print(table(datamutation[,get(colnamemut[i])]))
}
}
datamutation <- datamutation[,(deletecol) := NULL]
# Append sample information
# Read Sample Information
datasampleinfo <- read.table('data_clinical_sample.txt',sep = '\t',fill = TRUE)
datasampleinfo <- data.table(datasampleinfo)
# Change column names
colnames(datasampleinfo) <- as.character(unlist(datasampleinfo[1,]))
# Delete first row
datasampleinfo <- datasampleinfo[-1,]
mergeddata <- datamutation[datasampleinfo]
closeAllConnections()
rm(list=ls())
#library for sql based data table
library(data.table)
